{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isArrayLike from '@stdlib/assert-is-array-like-object';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport Float64Array from '@stdlib/array-float64';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum values.\n*\n* @param {Collection} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminmax( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\nfunction incrmminmax( out, window ) {\n\tvar minmax;\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar W;\n\tvar N;\n\tvar i;\n\tif ( arguments.length === 1 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( '1Ih9a,Hy', out ) );\n\t\t}\n\t\tminmax = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '1Ih9b,Hn', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum values. If not provided a value, the accumulator function returns the current minimum and maximum values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar sgn;\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn minmax;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: incoming value is zero, which means we need to be careful and correctly handle signed zeros...\n\t\telse if ( x === 0.0 ) {\n\t\t\tsgn = isNegativeZero( x );\n\t\t\tif ( x === min ) {\n\t\t\t\t// Case: outgoing value is the current minimum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === min &&\n\t\t\t\t\tisNegativeZero( buf[ i ] ) &&\n\t\t\t\t\tsgn === false\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\t\tmin = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn ) {\n\t\t\t\t\t// Ensure minimum value has the correct sign:\n\t\t\t\t\tmin = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( x === max ) {\n\t\t\t\t// Case: outgoing value is the current maximum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === max &&\n\t\t\t\t\tisPositiveZero( buf[ i ] ) &&\n\t\t\t\t\tsgn\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\t\tmax = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn === false ) {\n\t\t\t\t\t// Ensure maximum value has the correct sign:\n\t\t\t\t\tmax = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmminmax;\n"],"names":["incrmminmax","out","window","minmax","buf","min","max","W","N","i","arguments","length","isArrayLike","TypeError","format","isPositiveInteger","Float64Array","PINF","NINF","accumulator","x","sgn","v","k","isnan","isNegativeZero","isPositiveZero"],"mappings":";;w4BAiEA,SAASA,EAAaC,EAAKC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACdR,EAAS,CAAE,EAAK,GAChBI,EAAIN,MACE,CACN,IAAMW,EAAaX,GAClB,MAAM,IAAIY,UAAWC,EAAQ,WAAYb,IAE1CE,EAASF,EACTM,EAAIL,CACJ,CACD,IAAMa,EAAmBR,GACxB,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAQ1C,OANAH,EAAM,IAAIY,EAAcT,GACxBF,EAAMY,EACNX,EAAMY,EACNT,GAAK,EACLD,EAAI,EAEGW,EASP,SAASA,EAAaC,GACrB,IAAIC,EACAC,EACAC,EACJ,GAA0B,IAArBb,UAAUC,OACd,OAAW,IAANH,EACG,KAEDL,EAMR,GAHAM,GAAKA,EAAE,GAAKF,EAGPiB,EAAOJ,GACXZ,EAAID,EACJF,EAAMe,EACNd,EAAMc,OAGF,GAAKZ,EAAID,EACbC,GAAK,GACAY,EAAIf,GAASe,IAAMf,GAAOoB,EAAgBL,MAC9Cf,EAAMe,IAEFA,EAAId,GAASc,IAAMd,GAAOoB,EAAgBN,MAC9Cd,EAAMc,QAIH,GACFhB,EAAKK,KAAQJ,GAAOe,EAAIf,GACxBD,EAAKK,KAAQH,GAAOc,EAAId,GAC1BkB,EAAOpB,EAAKK,KAIZ,IAFAJ,EAAMe,EACNd,EAAMc,EACAG,EAAI,EAAGA,EAAIhB,EAAGgB,IACnB,GAAKA,IAAMd,EAAI,CAEd,GADAa,EAAIlB,EAAKmB,GACJC,EAAOF,GAAM,CACjBjB,EAAMiB,EACNhB,EAAMgB,EACN,KACA,EACIA,EAAIjB,GAASiB,IAAMjB,GAAOoB,EAAgBH,MAC9CjB,EAAMiB,IAEFA,EAAIhB,GAASgB,IAAMhB,GAAOoB,EAAgBJ,MAC9ChB,EAAMgB,EAEP,OAIE,GAAKF,EAAIf,EACbA,EAAMe,OAGF,GAAKA,EAAId,EACbA,EAAMc,OAGF,GAAW,IAANA,EAAY,CAErB,GADAC,EAAMI,EAAgBL,GACjBA,IAAMf,EAEV,GACCD,EAAKK,KAAQJ,GACboB,EAAgBrB,EAAKK,MACb,IAARY,GAIA,IADAhB,EAAMe,EACAG,EAAI,EAAGA,EAAIhB,EAAGgB,IACnB,GAAKA,IAAMd,GAAKgB,EAAgBrB,EAAKmB,IAAQ,CAC5ClB,EAAMD,EAAKmB,GACX,KACA,OAESF,IAEXhB,EAAMe,GAGR,GAAKA,IAAMd,EAEV,GACCF,EAAKK,KAAQH,GACboB,EAAgBtB,EAAKK,KACrBY,GAIA,IADAf,EAAMc,EACAG,EAAI,EAAGA,EAAIhB,EAAGgB,IACnB,GAAKA,IAAMd,GAAKiB,EAAgBtB,EAAKmB,IAAQ,CAC5CjB,EAAMF,EAAKmB,GACX,KACA,OAEiB,IAARF,IAEXf,EAAMc,EAGR,CAMD,OAJAhB,EAAKK,GAAMW,EAEXjB,EAAQ,GAAME,EACdF,EAAQ,GAAMG,EACPH,CACP,CACF"}